"use strict"

const flights = ['Russia', 'USA', 'Canada', 'Mexico', "Russia", "USA"]

const setFlights = new Set(flights)
console.log(setFlights)
console.log(setFlights.size)
console.log(setFlights.has('Russia'))

console.log(setFlights.add('R'))
console.log(setFlights.has('R'))

for (const flight of setFlights) {
  console.log(flight)
}

console.log([...setFlights])

const setObj = new Set([{a: 1}, {b: 2}, {c: 3}, {a: 4}, {b: 5}, {c: 6}, {a: 1}, {b: 2}, {c: 3}, {a: 4}, {b: 5}, {c: 6}])

console.log(setObj)

// Конспект
// Что такое сет:
//   Сет (Set) - это структура данных, введенная в ECMAScript 2015 (ES6), представляющая собой коллекцию уникальных значений.
//   До ES6 в JavaScript преимущественно использовались массивы и объекты.
//   Пример использования сета:
//   Уникализация массива: если нужно удалить дубликаты из массива, сет является эффективным решением.
//   Пример с билетами: Предположим, у нас есть массив билетов в разные страны, среди которых есть повторы. Преобразовав массив в сет, мы можем легко избавиться от дубликатов.
//   Как создать сет:
//   Инициализация производится с помощью ключевого слова new Set(), в конструктор которого можно передать итерируемый объект (например, массив).
//   Работа с сетом:
//   Добавление элементов: метод add().
//   Удаление элементов: метод delete().
//   Проверка наличия элемента: метод has().
//   Получение размера сета: свойство size.
//   Преобразование сета обратно в массив:
//   Для преобразования сета в массив можно использовать spread-оператор (...).
//   Уникализация не примитивных данных:
//   Сеты не могут уникализировать объекты из-за того, что каждый объект — это уникальная ссылка.
//   Сеты идеально подходят для работы с примитивными типами данных (строки, числа, булевы значения).
// Итерация по сету:
//   Сеты поддерживают итерацию напрямую, аналогично массивам, что позволяет пробегаться по их элементам циклом.
