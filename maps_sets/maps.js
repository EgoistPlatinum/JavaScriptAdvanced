'use strict';

// Конспект
// Что такое Map и почему они важны
// Мap - структура данных, позволяющая хранить пары ключ-значение.
//   Появились для повышения производительности по сравнению с объектами.
//   Отличие от объектов - Map может использовать любые значения в качестве ключей, в отличие от объектов, которые ограничены строками и символами.
//   Как работают Map
// Используют хэш-функции для преобразования ключей в хэши, которые затем указывают на "бакеты" для хранения значений.
//   В случае коллизий (когда разные ключи дают один и тот же хэш), используются связанные списки внутри бакетов.
//   Преимущества использования Map
// Быстрая оптимизация для добавления, удаления и поиска элементов — в среднем O(1), в худшем O(n).
//   Универсальность ключей — ключами могут быть любые типы данных.
//   Прямой доступ к размеру — Map имеют встроенное свойство size для проверки количества элементов.
//   Отличие Map от Объектов в JavaScript
// Производительность - Map оптимизированы для частых операций вставки и удаления, что делает их более быстрыми по сравнению с объектами.
//   Гибкость ключей - В Map в качестве ключей могут выступать любые типы данных.
//   Чистота данных - Map, в отличие от объектов, не имеют прототипов и других стандартных методов и свойств объектов в JavaScript.
//   Простота в использовании - Получение размера Map проще, чем подсчет свойств в объекте.

const map = new Map()
// map.set('London', '+10')
// map.set('Paris', '+15')
// map.set('Moscow', '+5')

map
  .set('Moscow', '+5')
  .set('Paris', '+15')
  .set('London', '+10')


console.log(map.get('London'))
console.log(map.get('not found'))


console.log(map.has('Paris'))
console.log(map.has('not found'))

console.log(map.delete('Moscow'))

// map.clear()

const arr = [1, 2, 3]

map
  .set(1, 5)
  .set(true, 'yes')
  .set(true, 'yes!')
  .set(false, 'no')
  .set(arr, 'array')
  .set({a: 1}, {b: 1})

console.log(map)
console.log(map.size)

console.log(map.get(arr))
console.log(map.get({a: 1}))

// Конспект
// Создание и работа с Map
// Создание Map:
//   Используйте new Map() для создания новой Map, например let weatherMap = new Map().
//   Добавление элементов:
//   Добавляйте элементы через метод set, указывая ключ и значение. Например, weatherMap.set('London', 10) для добавления температуры в Лондоне.
//   Получение элементов:
//   Получайте добавленные элементы через get, передавая ключ. Например, weatherMap.get('Moscow') вернет температуру в Москве.
//   Проверка наличия ключа:
//   Проверьте наличие ключа через has. weatherMap.has('Moscow') вернет true, если в Map есть Москва.
//   Удаление элементов:
//   Удаляйте элементы через delete, указывая ключ. Например, weatherMap.delete('London') удаляет Лондон из Map.
//   Очистка Map:
//   Очистите всю Map одновременно через clear(), например, weatherMap.clear().
//   Размер Map:
//   Получите размер Map с помощью свойства size, например, weatherMap.size вернет количество элементов в Map.
//   Особенности ключей Map
// Разнообразие ключей:
//   В качестве ключей можно использовать различные типы данных: строки, числа, булевы значения и даже объекты и массивы.
//   Уникальность ключей:
//   При попытке добавить элемент с уже существующим ключом, новое значение заменит старое.
//   Использование нестроковых и непримитивных ключей:
//   Помните, что Map использует адрес в памяти для идентификации непримитивных ключей, таких как объекты или массивы. Получение значения по такому ключу требует использования идентичной с точки зрения ссылки переменной.
//   Применение Map в JavaScript
// Map предлагает гибкость для работы с парами ключ-значение, где ключи могут быть разных типов данных.
//   При использовании непримитивных ключей важно помнить о специфике сравнения по ссылке на объект в памяти.

const weatherMap = new Map([
  ['London', '10'],
  ['Moscow', '5'],
])

console.log(weatherMap)

const object = {
  london: '10',
  moscow: '5',
  paris: '15',
}

console.log(Object.entries(object))

const weatherMap2 = new Map(Object.entries(object))
console.log(weatherMap2)

// Конспект
// Создание мап через массивы
// Основная идея: создать мапу, передав ей массив массивов.
//   Пример: let WeatherMap = new Map([["Лондон", 10], ["Москва", 7]]);
// Результат: получаем мапу с заранее определенными значениями, аналогично вызову нескольких set методов (WeatherMap.set("Лондон", 10).set("Москва", 7)).
//   Польза: удобен для быстрой инициализации мапы с множеством значений.
//   Преобразование объекта в мапу
// Сценарий: наличие объекта с данными и необходимость преобразования его в мапу для улучшения работы (частое добавление/удаление данных, специфические ключи).Пример объекта:```javascript let weatherOMG = { "Лондон": 10, "Москва": 7, "Париж": 14 };
// Шаги:
// Использование Object.entries(object) для преобразования объекта в массив массивов (ключ-значение).
// Создание мапы из этого массива: let weatherMap = new Map(Object.entries(weatherOMG));
// Результат: объект успешно преобразован в мапу.
// Возможность: С мапой можно работать гибче, например, удалять и добавлять элементы, а также получать размер мапы (WeatherMap.size).
// Ключевые преимущества:
// Простота создания.
// Улучшение работы с данными.
// Быстрое преобразование из объекта в мапу для расширения функционала работы с данными.
// Эти подходы делают работу с мапами в JavaScript более гибкой и эффективной.

const weatherMap3 = new Map([
  ["London", 10],
  ["Moscow", 7],
  ["Paris", 15],
])

for (const [key, value] of weatherMap3) {
  console.log(key)
  console.log(value)
}

console.log([...weatherMap3])
console.log([...weatherMap3.keys()])
console.log([...weatherMap3.values()])

console.log(weatherMap3)

weatherMap3.forEach((value, key) => console.log(key, value))

// Конспект
// Введение в Map:
// Создание Map с парами ключ-значение (Лондон: 10, Москва: 7, Париж: 14).
// Итерация по Map:
//   Основной метод итерации: использование цикла for...of для доступа к парам ключ-значение.
//   Деструктуризация в цикле for...of позволяет удобно разделить ключи и значения (key, value).
//   Методы и особенности Map:
//   Преобразование Map в массив:
//   Использование spread синтаксиса (...) для преобразования.
//   Доступ к ключам и значениям:
//   Методы .keys() и .values() для получения ключей и значений соответственно.
//   Преобразование итераторов, возвращаемых .keys() и .values(), в массивы с помощью spread синтаксиса.
//   Способы итерации по Map:
// Использование цикла for...of для обхода клю-значения (наиболее часто используемый).
// Преобразование в массив с последующей итерацией по массиву.
//   Итерирование по ключам или значениям после преобразования в массивы.


let exampleMap = new Map([
  ['London', 10],
  ['Moscow', 7],
  ['Paris', 15],
])

console.log('exampleMap', exampleMap)

const revers = new Map([...exampleMap].map(el => el.reverse()))

console.log(revers)

// Конспект
// Цель упражнения:
//   Закрепить работу с объектом Map в JavaScript.
//   Освоить преобразование Map в массив и обратно.
//   Научиться менять местами ключ и значение в Map.
//   Исходные данные:
//   Map с парами ключ-значение, где ключ - город, а значение - температура.
//   Задача:
// Изменить Map так, чтобы ключом стала температура, а значением - город.
//   Шаги выполнения:
//   Преобразование Map в массив:
//   Используйте spread оператор (...) для преобразования Map в массив массивов (пар ключ-значение).
// Меняем местами ключи и значения:
//   Итерируйте через полученный массив.
//   Для каждого подмассива (пары ключ-значение) используйте метод reverse(), чтобы поменять местами ключ и значение.
//   Преобразование массива обратно в Map:
//   Преобразуйте измененный массив обратно в Map с помощью конструктора Map().
//   Проверка результата:
//   Используйте console.log для вывода измененной Map и проверьте корректность обмена ключей и значений.


